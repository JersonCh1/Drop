// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          CartItem[]
  wishlist      Wishlist[]
  loyaltyPoints LoyaltyPoints?

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  products Product[]

  @@map("categories")
}

model Supplier {
  id          String  @id @default(cuid())
  name        String  @unique // AliExpress, CJ Dropshipping, etc.
  slug        String  @unique
  description String?
  website     String?

  // API / Integración
  apiKey      String? // Clave API si tiene integración
  apiEnabled  Boolean @default(false)

  // Configuración de envío
  averageShippingDays String @default("15-30") // ej: "15-30"
  shippingCountries   String? // JSON array de países que cubre

  // Comisiones y costos
  defaultCommission Float  @default(0) // Porcentaje de comisión
  defaultShippingCost Float @default(0) // Costo de envío base

  // Calificación
  rating      Float?   @default(0) // 0-5
  reliability Float?   @default(100) // 0-100 porcentaje de confiabilidad

  // Contacto
  contactEmail  String?
  contactPhone  String?
  contactPerson String?

  // Estado
  isActive    Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  products       Product[]
  supplierOrders SupplierOrder[]

  @@map("suppliers")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  basePrice   Float

  // Metadatos del producto
  brand       String?
  model       String?
  compatibility String? // JSON string de modelos compatibles

  // Dropshipping
  supplierId        String?
  supplierProductId String? // ID del producto en el proveedor
  supplierUrl       String? // URL del producto en el proveedor (AliExpress, etc)
  supplierPrice     Float?  // Precio del proveedor
  profitMargin      Float   @default(30) // Margen de ganancia en porcentaje
  shippingTime      String  @default("15-30 días hábiles") // Tiempo de envío
  importedAt        DateTime? // Cuándo se importó desde el proveedor
  lastSyncedAt      DateTime? // Última sincronización de precio/stock

  // Estado
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)
  inStock     Boolean @default(true)
  stockCount  Int     @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  variants   ProductVariant[]
  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  wishlist   Wishlist[]

  @@map("products")
}

model ProductVariant {
  id       String @id @default(cuid())
  productId String
  
  // Atributos de la variante
  name     String // ej: "iPhone 15 Pro - Azul"
  color    String?
  size     String?
  material String?
  
  // Pricing y stock
  price        Float
  comparePrice Float? // Precio tachado
  sku          String  @unique
  stockQuantity Int    @default(0)

  // Proveedor
  supplierProductId String? // ID del producto en el proveedor
  supplierUrl       String? // URL del producto en el proveedor
  supplierPrice     Float?
  
  // Estado
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String?
  variantId String?
  
  url       String
  altText   String?
  position  Int     @default(0)
  isMain    Boolean @default(false)
  
  createdAt DateTime @default(now())

  // Relaciones
  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id     String      @id @default(cuid())
  userId String?

  // Información del pedido
  orderNumber String @unique
  status      OrderStatus @default(PENDING)

  // Información del cliente
  customerFirstName String
  customerLastName  String
  customerEmail     String
  customerPhone     String

  // Montos
  subtotal     Float
  shippingCost Float
  tax          Float @default(0)
  total        Float

  // Información de pago
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  stripeSessionId String?

  // Información de envío
  shippingAddress    String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String
  notes              String?

  // Tracking
  trackingNumber String?
  trackingUrl    String?
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Dropshipping
  isDropshipping Boolean @default(true) // Si es orden de dropshipping
  supplierOrderCreated Boolean @default(false) // Si ya se creó orden con proveedor
  estimatedDelivery String? // "15-30 días hábiles"

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items          OrderItem[]
  statusHistory  OrderStatusHistory[]
  notifications  OrderNotification[]
  supplierOrders SupplierOrder[]

  @@map("orders")
}

model SupplierOrder {
  id        String  @id @default(cuid())
  orderId   String
  supplierId String

  // Información de la orden con el proveedor
  supplierOrderId     String? // ID de la orden en el sistema del proveedor
  supplierOrderNumber String? // Número de orden del proveedor
  supplierOrderUrl    String? // URL para ver la orden en el proveedor

  // Estado
  status        SupplierOrderStatus @default(PENDING)

  // Montos
  subtotal      Float
  shippingCost  Float
  total         Float

  // Tracking
  trackingNumber String?
  trackingUrl    String?
  carrier        String? // DHL, FedEx, China Post, etc.

  // Fechas
  orderedAt   DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?

  // Notas
  notes       String?
  errorMessage String? // Si hubo error al crear la orden

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("supplier_orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  
  // Datos del producto al momento de la compra
  productName  String
  productModel String?
  productColor String?
  quantity     Int
  price        Float
  total        Float
  
  createdAt DateTime @default(now())

  // Relaciones
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdBy String?     // Admin que cambió el estado
  createdAt DateTime    @default(now())

  // Relaciones
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model OrderNotification {
  id          String            @id @default(cuid())
  orderId     String
  type        NotificationType
  channel     NotificationChannel
  recipient   String            // Email o número de teléfono
  subject     String?
  message     String
  sentAt      DateTime?
  status      NotificationStatus @default(PENDING)
  error       String?
  retryCount  Int               @default(0)
  createdAt   DateTime          @default(now())

  // Relaciones
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_notifications")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String?
  sessionId String? // Para usuarios anónimos
  productId String
  variantId String?
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([userId, productId, variantId])
  @@unique([sessionId, productId, variantId])
  @@map("cart_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String?
  productId String

  // Información del reviewer (para usuarios anónimos)
  customerName  String?
  customerEmail String?

  rating    Int // 1-5
  title     String?
  comment   String?
  images    String? // JSON array de URLs de imágenes

  isVerified Boolean @default(false) // Si compró el producto
  isApproved Boolean @default(false) // Moderación

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Wishlist {
  id        String @id @default(cuid())
  userId    String
  productId String

  createdAt DateTime @default(now())

  // Relaciones
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

model Address {
  id         String  @id @default(cuid())
  userId     String

  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?

  isDefault  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Coupon {
  id    String @id @default(cuid())
  code  String @unique // Código del cupón (ej: VERANO20)

  // Tipo de descuento
  discountType    DiscountType // PERCENTAGE o FIXED
  discountValue   Float // 20 (para 20%) o 10 (para S/ 10 off)

  // Límites
  minPurchase     Float?  @default(0) // Compra mínima requerida
  maxDiscount     Float? // Descuento máximo (para porcentajes)
  usageLimit      Int?  // Límite total de usos (null = ilimitado)
  usageCount      Int    @default(0) // Cuántas veces se ha usado
  perUserLimit    Int?   @default(1) // Límite por usuario

  // Validez
  startDate       DateTime @default(now())
  endDate         DateTime?
  isActive        Boolean  @default(true)

  // Descripción
  description     String?

  // Tipos especiales
  freeShipping    Boolean  @default(false)
  firstOrderOnly  Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

enum DiscountType {
  PERCENTAGE // Descuento porcentual (ej: 20%)
  FIXED      // Descuento fijo (ej: S/ 10)
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  event     String      // page_view, product_view, add_to_cart, purchase, etc.
  data      Json?       // Datos adicionales del evento
  sessionId String?
  userId    String?
  ip        String?
  userAgent String?
  createdAt DateTime    @default(now())

  @@map("analytics")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  ORDER_CONFIRMATION
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_FAILED
  STOCK_ALERT
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum AnalyticsType {
  PAGE_VIEW
  PRODUCT_VIEW
  CART_ACTION
  PURCHASE
  USER_ACTION
}

enum SupplierOrderStatus {
  PENDING     // Orden pendiente de crear con proveedor
  PLACED      // Orden ya colocada con el proveedor
  CONFIRMED   // Proveedor confirmó la orden
  PROCESSING  // Proveedor está procesando
  SHIPPED     // Proveedor envió
  DELIVERED   // Entregado
  CANCELLED   // Cancelado
  FAILED      // Falló al crear orden
}

// =================== LOYALTY POINTS ===================

model LoyaltyPoints {
  id          String @id @default(cuid())
  userId      String @unique
  points      Int    @default(0)
  totalEarned Int    @default(0)
  totalSpent  Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions LoyaltyTransaction[]

  @@map("loyalty_points")
}

model LoyaltyTransaction {
  id          String @id @default(cuid())
  loyaltyId   String
  points      Int
  type        LoyaltyTransactionType
  description String
  orderId     String?

  createdAt DateTime @default(now())

  // Relaciones
  loyalty LoyaltyPoints @relation(fields: [loyaltyId], references: [id], onDelete: Cascade)

  @@map("loyalty_transactions")
}

enum LoyaltyTransactionType {
  PURCHASE
  REVIEW
  REFERRAL
  REDEMPTION
  BONUS
  ADJUSTMENT
}