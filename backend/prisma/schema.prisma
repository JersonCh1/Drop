// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orders    Order[]
  reviews   Review[]
  addresses Address[]
  cart      CartItem[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  basePrice   Decimal @db.Decimal(10, 2)
  
  // Metadatos del producto
  brand       String?
  model       String?
  compatibility String[] // Array de modelos de iPhone compatibles
  
  // Estado
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  variants   ProductVariant[]
  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model ProductVariant {
  id       String @id @default(cuid())
  productId String
  
  // Atributos de la variante
  name     String // ej: "iPhone 15 Pro - Azul"
  color    String?
  size     String?
  material String?
  
  // Pricing y stock
  price        Decimal @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2) // Precio tachado
  sku          String  @unique
  stockQuantity Int    @default(0)
  
  // Proveedor
  supplierProductId String? // ID del producto en el proveedor
  supplierUrl       String? // URL del producto en el proveedor
  supplierPrice     Decimal? @db.Decimal(10, 2)
  
  // Estado
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String?
  variantId String?
  
  url       String
  altText   String?
  position  Int     @default(0)
  isMain    Boolean @default(false)
  
  createdAt DateTime @default(now())

  // Relaciones
  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id     String      @id @default(cuid())
  userId String
  
  // Información del pedido
  orderNumber String @unique
  status      OrderStatus @default(PENDING)
  
  // Montos
  subtotal    Decimal @db.Decimal(10, 2)
  shippingCost Decimal @db.Decimal(10, 2)
  tax         Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  
  // Información de pago
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  stripePaymentId String?
  
  // Información de envío
  shippingAddress Json
  billingAddress  Json?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  variantId String
  
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Precio al momento de la compra
  
  createdAt DateTime @default(now())

  // Relaciones
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  variantId String
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@map("cart_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  rating    Int    @db.SmallInt // 1-5
  title     String?
  comment   String?
  
  isVerified Boolean @default(false) // Si compró el producto
  isApproved Boolean @default(false) // Moderación
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  
  isDefault  Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Supplier {
  id          String @id @default(cuid())
  name        String
  apiKey      String?
  apiSecret   String?
  baseUrl     String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}