// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orders    Order[]
  reviews   Review[]
  addresses Address[]
  cart      CartItem[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  basePrice   Decimal @db.Decimal(10, 2)
  
  // Metadatos del producto
  brand       String?
  model       String?
  compatibility String[] // Array de modelos de iPhone compatibles
  
  // Estado
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)
  inStock     Boolean @default(true)
  stockCount  Int     @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  variants   ProductVariant[]
  images     ProductImage[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model ProductVariant {
  id       String @id @default(cuid())
  productId String
  
  // Atributos de la variante
  name     String // ej: "iPhone 15 Pro - Azul"
  color    String?
  size     String?
  material String?
  
  // Pricing y stock
  price        Decimal @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2) // Precio tachado
  sku          String  @unique
  stockQuantity Int    @default(0)
  
  // Proveedor
  supplierProductId String? // ID del producto en el proveedor
  supplierUrl       String? // URL del producto en el proveedor
  supplierPrice     Decimal? @db.Decimal(10, 2)
  
  // Estado
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String?
  variantId String?
  
  url       String
  altText   String?
  position  Int     @default(0)
  isMain    Boolean @default(false)
  
  createdAt DateTime @default(now())

  // Relaciones
  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id     String      @id @default(cuid())
  userId String?
  
  // Información del pedido
  orderNumber String @unique
  status      OrderStatus @default(PENDING)
  
  // Información del cliente
  customerFirstName String
  customerLastName  String
  customerEmail     String
  customerPhone     String
  
  // Montos
  subtotal     Decimal @db.Decimal(10, 2)
  shippingCost Decimal @db.Decimal(10, 2)
  tax          Decimal @db.Decimal(10, 2) @default(0)
  total        Decimal @db.Decimal(10, 2)
  
  // Información de pago
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  stripeSessionId String?
  
  // Información de envío
  shippingAddress    String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String
  notes              String?
  
  // Tracking
  trackingNumber String?
  trackingUrl    String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items          OrderItem[]
  statusHistory  OrderStatusHistory[]
  notifications  OrderNotification[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  
  // Datos del producto al momento de la compra
  productName  String
  productModel String?
  productColor String?
  quantity     Int
  price        Decimal @db.Decimal(10, 2)
  total        Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())

  // Relaciones
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdBy String?     // Admin que cambió el estado
  createdAt DateTime    @default(now())

  // Relaciones
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model OrderNotification {
  id          String            @id @default(cuid())
  orderId     String
  type        NotificationType
  channel     NotificationChannel
  recipient   String            // Email o número de teléfono
  subject     String?
  message     String
  sentAt      DateTime?
  status      NotificationStatus @default(PENDING)
  error       String?
  retryCount  Int               @default(0)
  createdAt   DateTime          @default(now())

  // Relaciones
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_notifications")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String?
  sessionId String? // Para usuarios anónimos
  productId String
  variantId String?
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([userId, productId, variantId])
  @@unique([sessionId, productId, variantId])
  @@map("cart_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String?
  productId String
  
  // Información del reviewer (para usuarios anónimos)
  customerName  String?
  customerEmail String?
  
  rating    Int    @db.SmallInt // 1-5
  title     String?
  comment   String?
  
  isVerified Boolean @default(false) // Si compró el producto
  isApproved Boolean @default(false) // Moderación
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  
  isDefault  Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  event     String      // page_view, product_view, add_to_cart, purchase, etc.
  data      Json?       // Datos adicionales del evento
  sessionId String?
  userId    String?
  ip        String?
  userAgent String?
  createdAt DateTime    @default(now())

  @@map("analytics")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  ORDER_CONFIRMATION
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_FAILED
  STOCK_ALERT
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum AnalyticsType {
  PAGE_VIEW
  PRODUCT_VIEW
  CART_ACTION
  PURCHASE
  USER_ACTION
}