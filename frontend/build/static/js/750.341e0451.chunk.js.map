{"version":3,"file":"static/js/750.341e0451.chunk.js","mappings":"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","sources":["utils/healthCheck.ts","pages/HealthCheckPage.tsx"],"sourcesContent":["// frontend/src/utils/healthCheck.ts\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\r\nconst FRONTEND_VERSION = '2.0.0';\r\nconst EXPECTED_API_VERSION = '2.0.0';\r\n\r\ninterface BackendHealthResponse {\r\n  status: string;\r\n  service: string;\r\n  version: string;\r\n  apiVersion: string;\r\n  timestamp: string;\r\n  uptime: number;\r\n  environment: string;\r\n  services?: {\r\n    database: string | boolean;\r\n    email: boolean;\r\n    stripe: boolean;\r\n    cloudinary: boolean;\r\n  };\r\n  database?: {\r\n    connected: boolean;\r\n    time: string;\r\n  };\r\n}\r\n\r\ninterface HealthCheckResult {\r\n  success: boolean;\r\n  frontend: {\r\n    version: string;\r\n    environment: string;\r\n    apiUrl: string;\r\n  };\r\n  backend?: BackendHealthResponse;\r\n  versionMatch: boolean;\r\n  latency: number;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Realiza un health check completo del sistema\r\n * Verifica conectividad y sincronización de versiones\r\n */\r\nexport async function performHealthCheck(): Promise<HealthCheckResult> {\r\n  const startTime = Date.now();\r\n\r\n  const result: HealthCheckResult = {\r\n    success: false,\r\n    frontend: {\r\n      version: FRONTEND_VERSION,\r\n      environment: process.env.NODE_ENV || 'development',\r\n      apiUrl: API_URL\r\n    },\r\n    versionMatch: false,\r\n    latency: 0\r\n  };\r\n\r\n  try {\r\n    // Hacer request al backend health endpoint\r\n    const response = await fetch(`${API_URL}/health`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      signal: AbortSignal.timeout(5000) // 5 second timeout\r\n    });\r\n\r\n    const latency = Date.now() - startTime;\r\n    result.latency = latency;\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Backend returned status ${response.status}`);\r\n    }\r\n\r\n    const data: BackendHealthResponse = await response.json();\r\n    result.backend = data;\r\n\r\n    // Verificar que las versiones coincidan\r\n    result.versionMatch = data.apiVersion === EXPECTED_API_VERSION;\r\n\r\n    // Marcar como exitoso si el backend responde OK\r\n    result.success = data.status === 'OK';\r\n\r\n    // Advertir si las versiones no coinciden\r\n    if (!result.versionMatch) {\r\n      console.warn(\r\n        `⚠️ Version mismatch! Frontend expects API v${EXPECTED_API_VERSION}, but backend is v${data.apiVersion}`\r\n      );\r\n    }\r\n\r\n    return result;\r\n\r\n  } catch (error: any) {\r\n    result.error = error.message || 'Unknown error';\r\n    result.latency = Date.now() - startTime;\r\n\r\n    console.error('❌ Health check failed:', error);\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * Health check simple y rápido (solo conectividad)\r\n */\r\nexport async function quickHealthCheck(): Promise<boolean> {\r\n  try {\r\n    const response = await fetch(`${API_URL}/health`, {\r\n      method: 'GET',\r\n      signal: AbortSignal.timeout(3000)\r\n    });\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene información detallada del backend (requiere más tiempo)\r\n */\r\nexport async function getBackendInfo(): Promise<BackendHealthResponse | null> {\r\n  try {\r\n    const response = await fetch(`${API_URL}/health/full`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      signal: AbortSignal.timeout(10000)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Backend returned status ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('❌ Failed to get backend info:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica si el frontend y backend están sincronizados\r\n */\r\nexport async function checkVersionSync(): Promise<{\r\n  synced: boolean;\r\n  frontendVersion: string;\r\n  backendVersion: string;\r\n  message: string;\r\n}> {\r\n  try {\r\n    const healthCheck = await performHealthCheck();\r\n\r\n    if (!healthCheck.success || !healthCheck.backend) {\r\n      return {\r\n        synced: false,\r\n        frontendVersion: FRONTEND_VERSION,\r\n        backendVersion: 'unknown',\r\n        message: 'No se pudo conectar con el backend'\r\n      };\r\n    }\r\n\r\n    const synced = healthCheck.versionMatch;\r\n\r\n    return {\r\n      synced,\r\n      frontendVersion: FRONTEND_VERSION,\r\n      backendVersion: healthCheck.backend.apiVersion,\r\n      message: synced\r\n        ? '✅ Frontend y backend sincronizados'\r\n        : `⚠️ Versiones diferentes: Frontend v${FRONTEND_VERSION}, Backend v${healthCheck.backend.apiVersion}`\r\n    };\r\n\r\n  } catch (error: any) {\r\n    return {\r\n      synced: false,\r\n      frontendVersion: FRONTEND_VERSION,\r\n      backendVersion: 'error',\r\n      message: error.message || 'Error verificando sincronización'\r\n    };\r\n  }\r\n}\r\n","// frontend/src/pages/HealthCheckPage.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { performHealthCheck, getBackendInfo, checkVersionSync } from '../utils/healthCheck';\r\n\r\ninterface HealthStatus {\r\n  loading: boolean;\r\n  basicHealth: any;\r\n  fullHealth: any;\r\n  versionSync: any;\r\n  lastCheck: Date | null;\r\n}\r\n\r\nconst HealthCheckPage: React.FC = () => {\r\n  const [status, setStatus] = useState<HealthStatus>({\r\n    loading: true,\r\n    basicHealth: null,\r\n    fullHealth: null,\r\n    versionSync: null,\r\n    lastCheck: null\r\n  });\r\n\r\n  const runHealthChecks = async () => {\r\n    setStatus(prev => ({ ...prev, loading: true }));\r\n\r\n    try {\r\n      // Ejecutar todos los checks en paralelo\r\n      const [basicHealth, fullHealth, versionSync] = await Promise.all([\r\n        performHealthCheck(),\r\n        getBackendInfo(),\r\n        checkVersionSync()\r\n      ]);\r\n\r\n      setStatus({\r\n        loading: false,\r\n        basicHealth,\r\n        fullHealth,\r\n        versionSync,\r\n        lastCheck: new Date()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error running health checks:', error);\r\n      setStatus(prev => ({ ...prev, loading: false }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    runHealthChecks();\r\n  }, []);\r\n\r\n  const getStatusColor = (isHealthy: boolean) => {\r\n    return isHealthy ? 'text-green-600' : 'text-red-600';\r\n  };\r\n\r\n  const getStatusBadge = (isHealthy: boolean) => {\r\n    return isHealthy\r\n      ? 'bg-green-100 text-green-800'\r\n      : 'bg-red-100 text-red-800';\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"bg-white shadow-lg rounded-lg overflow-hidden\">\r\n          {/* Header */}\r\n          <div className=\"bg-blue-600 px-6 py-4\">\r\n            <h1 className=\"text-2xl font-bold text-white\">System Health Check</h1>\r\n            <p className=\"text-blue-100 mt-1\">\r\n              Verificación de estado del sistema y sincronización\r\n            </p>\r\n          </div>\r\n\r\n          {/* Última verificación */}\r\n          <div className=\"bg-gray-50 px-6 py-3 border-b border-gray-200 flex justify-between items-center\">\r\n            <span className=\"text-sm text-gray-600\">\r\n              {status.lastCheck\r\n                ? `Última verificación: ${status.lastCheck.toLocaleTimeString()}`\r\n                : 'No verificado'}\r\n            </span>\r\n            <button\r\n              onClick={runHealthChecks}\r\n              disabled={status.loading}\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium transition-colors\"\r\n            >\r\n              {status.loading ? 'Verificando...' : 'Refrescar'}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"p-6 space-y-6\">\r\n            {/* Loading State */}\r\n            {status.loading && (\r\n              <div className=\"flex items-center justify-center py-12\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n                <span className=\"ml-3 text-gray-600\">Ejecutando verificaciones...</span>\r\n              </div>\r\n            )}\r\n\r\n            {/* Version Sync */}\r\n            {!status.loading && status.versionSync && (\r\n              <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                <h2 className=\"text-lg font-semibold mb-3 flex items-center\">\r\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                  </svg>\r\n                  Sincronización de Versiones\r\n                </h2>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between items-center py-2\">\r\n                    <span className=\"text-gray-600\">Estado:</span>\r\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusBadge(status.versionSync.synced)}`}>\r\n                      {status.versionSync.synced ? '✓ Sincronizado' : '✗ Desincronizado'}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center py-2 bg-gray-50 px-3 rounded\">\r\n                    <span className=\"text-gray-600\">Frontend:</span>\r\n                    <span className=\"font-mono font-medium\">v{status.versionSync.frontendVersion}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center py-2 bg-gray-50 px-3 rounded\">\r\n                    <span className=\"text-gray-600\">Backend:</span>\r\n                    <span className=\"font-mono font-medium\">v{status.versionSync.backendVersion}</span>\r\n                  </div>\r\n                  <p className={`text-sm mt-2 ${status.versionSync.synced ? 'text-green-600' : 'text-orange-600'}`}>\r\n                    {status.versionSync.message}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Basic Health */}\r\n            {!status.loading && status.basicHealth && (\r\n              <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                <h2 className=\"text-lg font-semibold mb-3 flex items-center\">\r\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                  </svg>\r\n                  Conectividad Básica\r\n                </h2>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between items-center py-2\">\r\n                    <span className=\"text-gray-600\">Estado del Backend:</span>\r\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusBadge(status.basicHealth.success)}`}>\r\n                      {status.basicHealth.success ? '✓ Online' : '✗ Offline'}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center py-2 bg-gray-50 px-3 rounded\">\r\n                    <span className=\"text-gray-600\">Latencia:</span>\r\n                    <span className={`font-medium ${status.basicHealth.latency < 500 ? 'text-green-600' : status.basicHealth.latency < 1000 ? 'text-yellow-600' : 'text-red-600'}`}>\r\n                      {status.basicHealth.latency}ms\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center py-2 bg-gray-50 px-3 rounded\">\r\n                    <span className=\"text-gray-600\">API URL:</span>\r\n                    <span className=\"font-mono text-sm text-gray-700\">{status.basicHealth.frontend.apiUrl}</span>\r\n                  </div>\r\n                  {status.basicHealth.error && (\r\n                    <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\r\n                      <strong>Error:</strong> {status.basicHealth.error}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Full Health */}\r\n            {!status.loading && status.fullHealth && (\r\n              <div className=\"border border-gray-200 rounded-lg p-4\">\r\n                <h2 className=\"text-lg font-semibold mb-3 flex items-center\">\r\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                  </svg>\r\n                  Servicios del Backend\r\n                </h2>\r\n\r\n                {/* Backend Info */}\r\n                <div className=\"mb-4 grid grid-cols-2 gap-3\">\r\n                  <div className=\"bg-gray-50 px-3 py-2 rounded\">\r\n                    <div className=\"text-xs text-gray-500\">Servicio</div>\r\n                    <div className=\"font-medium\">{status.fullHealth.service}</div>\r\n                  </div>\r\n                  <div className=\"bg-gray-50 px-3 py-2 rounded\">\r\n                    <div className=\"text-xs text-gray-500\">Entorno</div>\r\n                    <div className=\"font-medium capitalize\">{status.fullHealth.environment}</div>\r\n                  </div>\r\n                  <div className=\"bg-gray-50 px-3 py-2 rounded\">\r\n                    <div className=\"text-xs text-gray-500\">Uptime</div>\r\n                    <div className=\"font-medium\">{Math.floor(status.fullHealth.uptime / 60)}m {Math.floor(status.fullHealth.uptime % 60)}s</div>\r\n                  </div>\r\n                  <div className=\"bg-gray-50 px-3 py-2 rounded\">\r\n                    <div className=\"text-xs text-gray-500\">Última actualización</div>\r\n                    <div className=\"font-medium text-xs\">{new Date(status.fullHealth.timestamp).toLocaleTimeString()}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Services Status */}\r\n                {status.fullHealth.services && (\r\n                  <div className=\"space-y-2\">\r\n                    <h3 className=\"font-medium text-gray-700 mb-2\">Estado de Servicios:</h3>\r\n                    {Object.entries(status.fullHealth.services).map(([service, serviceStatus]) => {\r\n                      const isHealthy = serviceStatus === 'connected' || serviceStatus === true;\r\n                      return (\r\n                        <div key={service} className=\"flex justify-between items-center py-2 px-3 bg-gray-50 rounded\">\r\n                          <span className=\"text-gray-700 capitalize\">{service}:</span>\r\n                          <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusBadge(isHealthy)}`}>\r\n                            {typeof serviceStatus === 'boolean'\r\n                              ? (serviceStatus ? '✓ Configurado' : '✗ No configurado')\r\n                              : serviceStatus === 'connected'\r\n                              ? '✓ Conectado'\r\n                              : serviceStatus === 'error'\r\n                              ? '✗ Error'\r\n                              : String(serviceStatus)}\r\n                          </span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Database Info */}\r\n                {status.fullHealth.database && (\r\n                  <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded\">\r\n                    <div className=\"flex items-center text-green-800\">\r\n                      <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4\" />\r\n                      </svg>\r\n                      <span className=\"font-medium\">Base de datos conectada</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Recommendations */}\r\n            {!status.loading && (\r\n              <div className=\"border border-blue-200 bg-blue-50 rounded-lg p-4\">\r\n                <h3 className=\"font-semibold text-blue-900 mb-2\">💡 Recomendaciones</h3>\r\n                <ul className=\"space-y-1 text-sm text-blue-800\">\r\n                  {status.versionSync && !status.versionSync.synced && (\r\n                    <li>• Actualiza el frontend o backend para sincronizar las versiones</li>\r\n                  )}\r\n                  {status.basicHealth && status.basicHealth.latency > 1000 && (\r\n                    <li>• La latencia es alta (&gt;1s), considera optimizar la conexión</li>\r\n                  )}\r\n                  {status.fullHealth && status.fullHealth.services && !status.fullHealth.services.database && (\r\n                    <li>• La base de datos no está conectada, verifica la configuración</li>\r\n                  )}\r\n                  {(!status.basicHealth || !status.basicHealth.success) && (\r\n                    <li>• El backend no responde, verifica que esté en ejecución</li>\r\n                  )}\r\n                  {status.versionSync?.synced && status.basicHealth?.success && (\r\n                    <li className=\"text-green-700\">✓ Sistema operando correctamente</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\r\n          <p>Esta página verifica la conectividad y sincronización entre frontend y backend</p>\r\n          <p className=\"mt-1\">Para soporte técnico, revisa los logs de Railway (backend) y Vercel (frontend)</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthCheckPage;\r\n"],"names":["API_URL","process","FRONTEND_VERSION","EXPECTED_API_VERSION","async","performHealthCheck","startTime","Date","now","result","success","frontend","version","environment","apiUrl","versionMatch","latency","response","fetch","concat","method","headers","signal","AbortSignal","timeout","ok","Error","status","data","json","backend","apiVersion","console","warn","error","message","getBackendInfo","checkVersionSync","healthCheck","synced","frontendVersion","backendVersion","HealthCheckPage","_status$versionSync","_status$basicHealth","setStatus","useState","loading","basicHealth","fullHealth","versionSync","lastCheck","runHealthChecks","prev","_objectSpread","Promise","all","useEffect","getStatusBadge","isHealthy","_jsx","className","children","_jsxs","toLocaleTimeString","onClick","disabled","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","service","Math","floor","uptime","timestamp","services","Object","entries","map","_ref","serviceStatus","String","database"],"sourceRoot":""}